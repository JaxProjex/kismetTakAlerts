[
    {
        "id": "1214aeeb5f07994e",
        "type": "tab",
        "label": "kismetTakFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "80056a321302c597",
        "type": "http request",
        "z": "1214aeeb5f07994e",
        "name": "http alerts",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.0.0.185:2501/alerts/all_alerts.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "8e5ac8b2c5788936"
            ]
        ]
    },
    {
        "id": "8f2ffa13d4058891",
        "type": "inject",
        "z": "1214aeeb5f07994e",
        "name": "ping",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "80056a321302c597",
                "493c66a1c144d68a"
            ]
        ]
    },
    {
        "id": "8030df3b2694293b",
        "type": "function",
        "z": "1214aeeb5f07994e",
        "name": "data filter",
        "func": "var newMsg;\nfor (var i = 0; i < msg.payload[0].length; i++) {\n    var severity = msg.payload[0][i][\"kismet.alert.severity\"]\n    var destMac = msg.payload[0][i][\"kismet.alert.dest_mac\"]\n    var srcMac = msg.payload[0][i][\"kismet.alert.source_mac\"]\n    var txMac = msg.payload[0][i][\"kismet.alert.transmitter_mac\"]\n    var header = msg.payload[0][i][\"kismet.alert.header\"]\n    var text = msg.payload[0][i][\"kismet.alert.text\"]\n    var alertHeader = msg.payload[0][i][\"kismet.alert.header\"]\n    var alertClass = msg.payload[0][i][\"kismet.alert.class\"]\n    var latPri = msg.payload[0][i][\"field.unknown.not.registered\"][\"kismet.common.location.geopoint\"][1]\n    var lonPri = msg.payload[0][i][\"field.unknown.not.registered\"][\"kismet.common.location.geopoint\"][0]\n    var latSec = msg.payload[1][\"kismet.common.location.geopoint\"][1]\n    var lonSec = msg.payload[1][\"kismet.common.location.geopoint\"][0]\n    var uid = msg.payload[0][i][\"kismet.alert.timestamp\"]\n    newMsg = { \n        payload: {\n            \"severity\": severity,\n            \"dest\": destMac,\n            \"src\": srcMac,\n            \"tx\": txMac,\n            \"alertHeader\": alertHeader,\n            \"alertClass\": alertClass,\n            \"text\": text,\n            \"latPri\": latPri,\n            \"lonPri\": lonPri,\n            \"latSec\": latSec,\n            \"lonSec\": lonSec,\n            \"uid\": uid\n        }\n    }\n    node.send(newMsg);\n}\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "0d62d7bfb4be0c6b",
                "5328dbb1b1f945d0"
            ]
        ]
    },
    {
        "id": "0d62d7bfb4be0c6b",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug filter1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 100,
        "wires": []
    },
    {
        "id": "5328dbb1b1f945d0",
        "type": "function",
        "z": "1214aeeb5f07994e",
        "name": "kismet json (alert)",
        "func": "const short = 10000;\nconst cinco = 5 * 60 * 1000;\nconst diez = 2 * cinco;\nconst stale = new Date(Date.now() + diez).toISOString();\n\nvar severity = msg.payload.severity;\nvar dest = msg.payload.dest;\nvar src = msg.payload.tx;\nvar tx = msg.payload.src;\nvar alertHeader = msg.payload.alertHeader;\nvar alertClass = msg.payload.alertClass;\nvar text = msg.payload.text;\nvar latPri = msg.payload.latPri;\nvar lonPri = msg.payload.lonPri;\nvar latSec = msg.payload.latSec;\nvar lonSec = msg.payload.lonSec;\nvar uid = msg.payload.uid;\n\nvar name;\nif (severity == 20){\n    name = \"Kismet Alert Critical\";\n} else if (severity === 15){\n    name = \"Kismet Alert High\";\n} else if (severity === 10){\n    name = \"Kismet Alert Medium\";\n} else if (severity === 5){\n    name = \"Kismet Alert Low\";\n} else if (severity === 0){\n    name = \"Kismet Alert Info\";\n} else {\n    name = \"Kismet Alert\";\n}\n\nvar color;\nvar lat; \nvar lon;\nif (latPri !== 0 && lonPri !== 0){\n    lat = latPri;\n    lon = lonPri;\n} else {\n    lat = latSec;\n    lon = lonSec;\n}\nvar info = \"Kismet Alert!!! \" + alertHeader + \", \" + alertClass + \", Severity:\" + severity + \", \" + text + \", Destination MAC:\" + dest + \", Source MAC:\" + src + \", Transmitter:\" + tx;\nvar remarks = String(info);\n\nmsg.payload = {\n    \"event\": {\n        \"_attributes\": {\n            \"version\": \"2.0\",\n            \"uid\": uid,\n            \"type\": \"b-m-p-s-m\",\n            \"how\": \"h-g-i-g-o\",\n            \"time\": new Date(Date.now()).toISOString(),\n            \"start\": new Date(Date.now()).toISOString(),\n            \"stale\": stale,\n        },\n        \"point\": {\n            \"_attributes\": {\n                \"lat\": lat,\n                \"lon\": lon,\n                \"hae\": \"0.0\",\n                \"ce\": \"9999999.0\",\n                \"le\": \"9999999.0\"\n            }\n        },\n        \"detail\": {\n            \"usericon\": {\n                \"_attributes\": {\n                    \"iconsetpath\": \"f7f71666-8b28-4b57-9fbb-e38e61d33b79/Google/caution.png\",\n                },\n            },\n            \"remarks\": {\n                \"_text\": remarks,\n            },\n            \"contact\": {\n                \"_attributes\": {\n                    \"callsign\": name,\n                }\n            },\n            \"color\": {\n                \"_attributes\": {\n                //\"argb\": \"\"+ color +\"\",\n                },\n            },\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "e2e708d2cf0722f9",
                "cec67b05f084e766"
            ]
        ]
    },
    {
        "id": "493c66a1c144d68a",
        "type": "http request",
        "z": "1214aeeb5f07994e",
        "name": "http location",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.0.0.185:2501/gps/location.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 220,
        "wires": [
            [
                "a093e8299dd7027a"
            ]
        ]
    },
    {
        "id": "ed11e6f2b98ba642",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug join1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "8e5ac8b2c5788936",
        "type": "join",
        "z": "1214aeeb5f07994e",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 770,
        "y": 180,
        "wires": [
            [
                "8030df3b2694293b",
                "ed11e6f2b98ba642"
            ]
        ]
    },
    {
        "id": "a093e8299dd7027a",
        "type": "delay",
        "z": "1214aeeb5f07994e",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "8e5ac8b2c5788936"
            ]
        ]
    },
    {
        "id": "e2e708d2cf0722f9",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug cot1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 100,
        "wires": []
    },
    {
        "id": "567c4afbc0045ea8",
        "type": "websocket in",
        "z": "1214aeeb5f07994e",
        "name": "ws out",
        "server": "",
        "client": "3f871dc4f04bb293",
        "x": 570,
        "y": 1020,
        "wires": [
            [
                "0e6475f41858cf42"
            ]
        ]
    },
    {
        "id": "67ec10ffa532da35",
        "type": "websocket out",
        "z": "1214aeeb5f07994e",
        "name": "ws in",
        "server": "",
        "client": "3f871dc4f04bb293",
        "x": 570,
        "y": 960,
        "wires": []
    },
    {
        "id": "291661cce270b2e2",
        "type": "inject",
        "z": "1214aeeb5f07994e",
        "name": "sub alert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"SUBSCRIBE\": \"ALERT\"}",
        "payloadType": "json",
        "x": 160,
        "y": 900,
        "wires": [
            [
                "67ec10ffa532da35"
            ]
        ]
    },
    {
        "id": "0e6475f41858cf42",
        "type": "json",
        "z": "1214aeeb5f07994e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "4702808b7ce42ee4",
                "4a4fbff5c99b5ecb",
                "04eccc83b1067f0b"
            ]
        ]
    },
    {
        "id": "9af594f769b444fd",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug json3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 940,
        "wires": []
    },
    {
        "id": "8a65fd31101c5ecc",
        "type": "function",
        "z": "1214aeeb5f07994e",
        "name": "kismet json (alert)",
        "func": "const short = 10000;\nconst cinco = 5 * 60 * 1000;\nconst diez = 2 * cinco;\nconst stale = new Date(Date.now() + diez).toISOString();\n\nvar severity = msg.payload.ALERT[\"kismet.alert.severity\"];\nvar dest = msg.payload.ALERT[\"kismet.alert.dest_mac\"];\nvar src = msg.payload.ALERT[\"kismet.alert.source_mac\"];\nvar tx = msg.payload.ALERT[\"kismet.alert.transmitter_mac\"];\nvar alertHeader = msg.payload.ALERT[\"kismet.alert.header\"];\nvar alertClass = msg.payload.ALERT[\"kismet.alert.class\"];\nvar text = msg.payload.ALERT[\"kismet.alert.text\"];\nvar lat = msg.payload.ALERT[\"field.unknown.not.registered\"][\"kismet.common.location.geopoint\"][1];\nvar lon = msg.payload.ALERT[\"field.unknown.not.registered\"][\"kismet.common.location.geopoint\"][0];\nvar uid = msg.payload.ALERT[\"kismet.alert.timestamp\"];\n\nvar name;\nif (severity == 20){\n    name = \"Kismet Alert Critical\";\n} else if (severity === 15){\n    name = \"Kismet Alert High\";\n} else if (severity === 10){\n    name = \"Kismet Alert Medium\";\n} else if (severity === 5){\n    name = \"Kismet Alert Low\";\n} else if (severity === 0){\n    name = \"Kismet Alert Info\";\n} else {\n    name = \"Kismet Alert\";\n}\n\nvar info = \"Kismet Alert!!! \" + alertHeader + \", \" + alertClass + \", Severity:\" + severity + \", \" + text + \", Destination MAC:\" + dest + \", Source MAC:\" + src + \", Transmitter:\" + tx;\nvar remarks = String(info);\n\nmsg.payload = {\n    \"event\": {\n        \"_attributes\": {\n            \"version\": \"2.0\",\n            \"uid\": uid,\n            \"type\": \"b-m-p-s-m\",\n            \"how\": \"h-g-i-g-o\",\n            \"time\": new Date(Date.now()).toISOString(),\n            \"start\": new Date(Date.now()).toISOString(),\n            \"stale\": stale,\n        },\n        \"point\": {\n            \"_attributes\": {\n                \"lat\": lat,\n                \"lon\": lon,\n                \"hae\": \"0.0\",\n                \"ce\": \"9999999.0\",\n                \"le\": \"9999999.0\"\n            }\n        },\n        \"detail\": {\n            \"usericon\": {\n                \"_attributes\": {\n                    \"iconsetpath\": \"f7f71666-8b28-4b57-9fbb-e38e61d33b79/Google/caution.png\",\n                },\n            },\n            \"remarks\": {\n                \"_text\": remarks,\n            },\n            \"contact\": {\n                \"_attributes\": {\n                    \"callsign\": name,\n                }\n            },\n            \"color\": {\n                \"_attributes\": {\n                //\"argb\": \"\"+ color +\"\",\n                },\n            },\n        }\n    }\n};\nnode.send(msg);\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1020,
        "wires": [
            [
                "2341db72dca3957a",
                "cec67b05f084e766"
            ]
        ]
    },
    {
        "id": "2341db72dca3957a",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug cot3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 940,
        "wires": []
    },
    {
        "id": "8a19438d9886b5d2",
        "type": "tcp out",
        "z": "1214aeeb5f07994e",
        "name": "",
        "host": "10.237.104.20",
        "port": "8089",
        "beserver": "client",
        "base64": false,
        "end": false,
        "tls": "1c52b35895c06e7e",
        "x": 2270,
        "y": 1080,
        "wires": []
    },
    {
        "id": "73cfd536b9a86256",
        "type": "udp out",
        "z": "1214aeeb5f07994e",
        "name": "",
        "addr": "239.2.3.1",
        "iface": "",
        "port": "6969",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "multi",
        "x": 2250,
        "y": 1000,
        "wires": []
    },
    {
        "id": "fcd0610e225c5452",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug tak",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2220,
        "y": 900,
        "wires": []
    },
    {
        "id": "cec67b05f084e766",
        "type": "tak",
        "z": "1214aeeb5f07994e",
        "name": "TAK",
        "x": 1870,
        "y": 1060,
        "wires": [
            [
                "fcd0610e225c5452",
                "73cfd536b9a86256"
            ],
            [],
            []
        ]
    },
    {
        "id": "5ce0255948dff490",
        "type": "inject",
        "z": "1214aeeb5f07994e",
        "name": "unsub alert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"UNSUBSCRIBE\": \"ALERT\"}",
        "payloadType": "json",
        "x": 180,
        "y": 940,
        "wires": [
            [
                "67ec10ffa532da35"
            ]
        ]
    },
    {
        "id": "ab32b56fe726ebea",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "README",
        "info": "REQUIREMENTS:\n\n-Node-Red\n\n-node-red-contrib-tak https://github.com/snstac/node-red-contrib-tak\n\n-TAKServer (or Multicast supported devices)\n\n-Kismet Server (actively running with GPS and WiFi Card)\n\nSETUP NODE-RED:\n\n-https://nodered.org/docs/getting-started/\n\n-options include installing node-red on your local PC, a Raspberry Pi or similar single board computer or mini PC, deploying node-red on a cloud server or virtual private server (VPS), Docker Container, or local virtual environment. After installing node-red you should be able to go to the node-red dashboard at http://*nodeRedIPaddress:1880 you may have to open appropriate ports (1880) to allow devices to access the node-red dashboard.\n\n-ensure you install the \"node-red-contrib-tak\" node. If not there should be a prompt when you import wigleTakFlow in Node-Red that there are nodes that need to be installed and will automatically install them for you if you allow. In the event that isnt the case, in Node-Red: Menu (3 horizontal lines) > Manage palette > Install > Search \"node-red-contrib-tak\" > Install > Install\n\nIMPORT .JSON FLOW TO NODE RED:\n\n-in GitHub: click on \"kismetTakAlerts.json\" > click on the download icon \"Download raw file\" > note where the \"kismetTakAlerts.json\" file downloaded to, default is in your Downloads folder.\n\n-in Node-Red: click on menu icon (3 horizontal lines top right) > click on \"Import\" > click on \"select a file to import\" > go to Downloads folder and click on \"kismetTakAlerts.json\" > Upload > Import\n\nALTERNATIVELY..\n\n-you can just copy the whole \"kismetTakAlerts.json\" code from GitHub and paste it into the Node-Red Import Clipboard.\n\nCONFIGURE TAKSERVER:\n\n-TAKServer can be hosted on various platforms: Raspberry Pi, Mini PCs, your local PC, Cloud Servers or Virtual Private Servers (VPS), Docker Containers, or Virtual Environments. Regardless, if you're looking for instructions on setting up your TAKServer I recommend ATAKHQs guides https://www.atakhq.com/en/tak-server.\n\n-Configuring the TCP (TAKServer) node in Node-Red kismetTakAlerts, Input your TAKServer IP and Port, and checkbox whether you're using SSL/TLS or not. If you are using SSL/TLS, ensure you upload you TAKServer certificates and key that are located in the directory of your TAKServer that stores all client certificates/keys (ie: ubuntu docker container is \"/opt/tak/certs/files\"). I Suggest creating a TAK client \"node-red\" to be used specifically for Node-Reds handling of forwarding data to TAK. In your certificates file you will want to copy and upload \"node-red.pem\" as the \"Certificate\", \"node-red.key\" as the \"Private Key\" and \"ca.pem\" as the \"CA Certificate\" in the TLS Configuration Properties in the TCP (TAKServer) node in Node-Red. You will also need to enter the Passphrase for your TAKServer truststore, this can be found in your TAKServers CoreConfig.xml file. Default is \"atakatak\".\n\nCONFIGURE PING NODE:\n\n-in Node-Red: configure ping node \"repeat\" > \"interval\" and set the frequency of how often the kismet alerts are requested and then forwarded to TAK. The http GET request flow should just be used to get alerts that were missed before subscribing to kismet with websocket (eventbus)\n\nCONFIGURE BOTH HTTP NODES:\n\n-in Node-Red: input your kismet device IP address and port (default port is 2501)\n\nCONFIGURE BOTH WS (IN/OUT) NODES:\n\n-in Node-Red: input your login credentials for kismet device followed by IP address and port (default port is 2501). ie: ws://username:password@kismetipaddress:2501\n\nCONFIGURE TGT DEVICES:\n\n-in Node-Red: input your target MACs and SSIDs in the tgt devices node. Ensure to follow the format of how its written JUST.. LIKE.. THE.. EXAMPLE.\n\nUSING THE KISMETTAKALERTS:\n\n-short answer: make sure kismets UI is actively running and just click \"sub alert\" in the flow.\n\n-once your TCP TAKServer node is connected, your http nodes are configured, and your ws nodes are configured, you're ready to start having node-red listen in for kismet alerts to popup and get forwarded to TAK. Open ATAK/iTAK and test to make sure you're receiving CoT either from multicast or the TAKServer.\n\n-ping node repeat/intervals aren't necessary for this flow since the ws node (websocket/eventbus) will automatically send CoT to TAK once alerts (or tgt devices) are detected from kismet in realtime. The http GET request flow is mostly just to catch any alibi alerts missed that are still stored in kismet. Feel free to have it default ping every few minutes if you feel its necessary as a failsafe to not have missed alerts.\n\n-Begin by clicking the sub alerts node to have node red wait for kismet alerts to get forwarded to TAK. Click the sub mac/ssid node to have node red populate a CoT to TAK once targeted SSIDs or MACs are detected by kismet.\n\n-creating a list of targeted SSIDs and MACs can be done in the tgt devices node.\n\n-to stop data flow from websocket/eventbus, use the unsub node.\n\nHOW THE KISMETTAKALERTS WORKS:\n\n-the top flow sends an http GET request to kismets web api that pulls all alerts that kismet has stored from the current active scan but repackages it up into CoT to push to TAKServer or multicast for TAK devices to view.\n\n-the bottom flow is subscribing to certain topics of kismets websocket eventbus (alerts and/or scan messages to detect if targeted devices are present) so when something is detected it will send the data and be repackaged as a CoT in realtime to be pushed to TAKServer or multicast.\n\nTROUBLESHOOTING / KNOWN ISSUES:\n\n-in the event the Node-Red service explodes and you lose connection to the Node-Red UI and cant reconnect, you may need to restart your Node-Red service\n\n$ sudo service node-red restart",
        "x": 780,
        "y": 760,
        "wires": []
    },
    {
        "id": "528678c6a8b33565",
        "type": "inject",
        "z": "1214aeeb5f07994e",
        "name": "sub mac/ssid",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"SUBSCRIBE\": \"MESSAGE\"}",
        "payloadType": "json",
        "x": 170,
        "y": 1060,
        "wires": [
            [
                "c9905570933b6f20"
            ]
        ]
    },
    {
        "id": "fa8fc1e424d19964",
        "type": "inject",
        "z": "1214aeeb5f07994e",
        "name": "unsub mac/ssid",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"UNSUBSCRIBE\": \"MESSAGE\"}",
        "payloadType": "json",
        "x": 200,
        "y": 1100,
        "wires": [
            [
                "f7f1216b531d5a95"
            ]
        ]
    },
    {
        "id": "73eb9b4266337590",
        "type": "function",
        "z": "1214aeeb5f07994e",
        "name": "tgt devices",
        "func": "//input your target MACs and SSIDs (case sensitive, follow the same format as the examples)\nvar tgt = [\"XFINITY\", \"xfinitywifi\", \"6B:92:1C:FD:E8:C2\", \"11:91:8C:FD:A9:C3\"];\n\n//if statement to filter targeted MACs/SSIDs\nvar scan = msg.payload.MESSAGE[\"kismet.messagebus.message_string\"];\nfor (let i = 0; i < tgt.length; i++) {;\n    if (scan.includes(tgt[i])){\n        msg.payload = {\n            \"tgt\": tgt[i],\n            \"text\": scan\n        }\n        msg.topic = 1;\n        node.send(msg);\n        }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1160,
        "wires": [
            [
                "ca220a3bf037cb57"
            ]
        ]
    },
    {
        "id": "4702808b7ce42ee4",
        "type": "rbe",
        "z": "1214aeeb5f07994e",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.ALERT",
        "topi": "topic",
        "x": 870,
        "y": 1020,
        "wires": [
            [
                "8a65fd31101c5ecc",
                "9af594f769b444fd"
            ]
        ]
    },
    {
        "id": "4a4fbff5c99b5ecb",
        "type": "rbe",
        "z": "1214aeeb5f07994e",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.MESSAGE",
        "topi": "topic",
        "x": 890,
        "y": 1160,
        "wires": [
            [
                "73eb9b4266337590"
            ]
        ]
    },
    {
        "id": "04eccc83b1067f0b",
        "type": "rbe",
        "z": "1214aeeb5f07994e",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.GPS_LOCATION",
        "topi": "topic",
        "x": 890,
        "y": 1200,
        "wires": [
            [
                "30e7b4cdf4a9b20e"
            ]
        ]
    },
    {
        "id": "ca220a3bf037cb57",
        "type": "join",
        "z": "1214aeeb5f07994e",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "591a4734d54a924b",
                "bf535f8cfd7952b9"
            ]
        ]
    },
    {
        "id": "591a4734d54a924b",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug join4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1260,
        "wires": []
    },
    {
        "id": "30e7b4cdf4a9b20e",
        "type": "function",
        "z": "1214aeeb5f07994e",
        "name": "gps devices",
        "func": "var lat = msg.payload.GPS_LOCATION[\"kismet.common.location.geopoint\"][1]\nvar lon = msg.payload.GPS_LOCATION[\"kismet.common.location.geopoint\"][0]\nvar uuid = msg.payload.GPS_LOCATION[\"kismet.common.location.time_sec\"]\nmsg.payload = {\n    \"lat\": lat,\n    \"lon\": lon,\n    \"uuid\": uuid\n};\nmsg.topic = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1200,
        "wires": [
            [
                "ca220a3bf037cb57"
            ]
        ]
    },
    {
        "id": "c9905570933b6f20",
        "type": "trigger",
        "z": "1214aeeb5f07994e",
        "name": "sub gps",
        "op1": "",
        "op2": "{\"SUBSCRIBE\":\"GPS_LOCATION\"}",
        "op1type": "pay",
        "op2type": "json",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 380,
        "y": 1060,
        "wires": [
            [
                "67ec10ffa532da35"
            ]
        ]
    },
    {
        "id": "f7f1216b531d5a95",
        "type": "trigger",
        "z": "1214aeeb5f07994e",
        "name": "unsub gps",
        "op1": "",
        "op2": "{\"UNSUBSCRIBE\":\"GPS_LOCATION\"}",
        "op1type": "pay",
        "op2type": "json",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 370,
        "y": 1100,
        "wires": [
            [
                "67ec10ffa532da35"
            ]
        ]
    },
    {
        "id": "bf535f8cfd7952b9",
        "type": "function",
        "z": "1214aeeb5f07994e",
        "name": "kismet json (tgt)",
        "func": "const short = 10000;\nconst cinco = 5 * 60 * 1000;\nconst diez = 10 * cinco;\nconst stale = new Date(Date.now() + diez).toISOString();\n\nvar text = msg.payload[\"1\"].text\nvar lat = msg.payload[\"2\"].lat;\nvar lon = msg.payload[\"2\"].lon;\nvar uid = msg.payload[\"2\"].uuid;\nvar tgt = msg.payload[\"1\"].tgt;\nvar name = \"tgt: \" + tgt;\nvar remarks = text;\n\nmsg.payload = {\n    \"event\": {\n        \"_attributes\": {\n            \"version\": \"2.0\",\n            \"uid\": tgt,\n            \"type\": \"a-u-G\",\n            \"how\": \"h-g-i-g-o\",\n            \"time\": new Date(Date.now()).toISOString(),\n            \"start\": new Date(Date.now()).toISOString(),\n            \"stale\": stale,\n        },\n        \"point\": {\n            \"_attributes\": {\n                \"lat\": lat,\n                \"lon\": lon,\n                \"hae\": \"0.0\",\n                \"ce\": \"9999999.0\",\n                \"le\": \"9999999.0\"\n            }\n        },\n        \"detail\": {\n            \"usericon\": {\n                \"_attributes\": {\n                    \"iconsetpath\": \"f7f71666-8b28-4b57-9fbb-e38e61d33b79/Google/red-pushpin.png\",\n                },\n            },\n            \"remarks\": {\n                \"_text\": remarks,\n            },\n            \"contact\": {\n                \"_attributes\": {\n                    \"callsign\": name,\n                }\n            },\n            \"color\": {\n                \"_attributes\": {\n                //\"argb\": \"\"+ color +\"\",\n                },\n            },\n        }\n    }\n};\nnode.send(msg);\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1180,
        "wires": [
            [
                "cec67b05f084e766",
                "77c495ed7eb9ecec"
            ]
        ]
    },
    {
        "id": "d2e2b98b78c27c17",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "subscribe to alerts",
        "info": "will immediately plot a CoT to ATAK if alerts are subscribed to and are detected",
        "x": 170,
        "y": 860,
        "wires": []
    },
    {
        "id": "241bbaa6c929e219",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "subscribe to tgt mac/ssids",
        "info": "will immediately plot a CoT to ATAK if mac/ssid are subscribed to and are detected, add in tgt SSIDs and MACs in tgt devices node",
        "x": 190,
        "y": 1020,
        "wires": []
    },
    {
        "id": "77c495ed7eb9ecec",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug cot4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1260,
        "wires": []
    },
    {
        "id": "6ea1421356232e26",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "configure tgt devices",
        "info": "in tgt devices node in \"var tgt = \" add in your SSIDs and MAC addresses formatted the same as the example provided.",
        "x": 1060,
        "y": 1120,
        "wires": []
    },
    {
        "id": "59a9eba3353d5182",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "config ping",
        "info": "configure ping node and scroll down to repeat and set to interval and input how often you want to update to CoTs to TAK.\nthis ping node will start the flow to send to TAK as CoT all alerts in the event you subscribed to alerts after having had recieved alerts previously.",
        "x": 260,
        "y": 120,
        "wires": []
    },
    {
        "id": "fc5a026ffd997b34",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "configure TCP (TAKServer)",
        "info": "if using SSL/TLS ensure you upload your certificates, key and input your passphrase.\nCertificates (.pem) and key (.key) can be found in your TAKServers directory where it stores all TAK client certificates.\nDefualt SSL/TLS port is 8089.\n",
        "x": 2270,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e33033b31df79e9e",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "configure both ws",
        "info": "input kismet device ip addres and username and password login for kismet UI. formatted as ws://username:password@kismetipaddress:2501",
        "x": 570,
        "y": 920,
        "wires": []
    },
    {
        "id": "060ee2f0300820e7",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "configure both http",
        "info": "input ip of kismet device into both http nodes",
        "x": 490,
        "y": 140,
        "wires": []
    },
    {
        "id": "00d5a73c32417978",
        "type": "ui_switch",
        "z": "1214aeeb5f07994e",
        "name": "switch",
        "label": "kismetTakFlow: Get Alerts",
        "tooltip": "",
        "group": "6aa9afc81e0c8c1e",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "1ab6a81f1c03d3bd"
            ]
        ]
    },
    {
        "id": "1ab6a81f1c03d3bd",
        "type": "trigger",
        "z": "1214aeeb5f07994e",
        "name": "ping frequency",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "false",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 260,
        "y": 240,
        "wires": [
            [
                "80056a321302c597",
                "493c66a1c144d68a"
            ]
        ]
    },
    {
        "id": "3d26516b291a7c04",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "(optional UI) configure ping frequency",
        "info": "in the ping frequency node configure how often you want traccar clients to be updated to TAK",
        "x": 290,
        "y": 280,
        "wires": []
    },
    {
        "id": "f5085cb3cba08017",
        "type": "ui_button",
        "z": "1214aeeb5f07994e",
        "name": "sub",
        "group": "6aa9afc81e0c8c1e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SubscribeAlerts",
        "tooltip": "subscribes to alerts",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"SUBSCRIBE\": \"ALERT\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 1220,
        "wires": [
            [
                "67ec10ffa532da35",
                "ae812febf2e1ef2f"
            ]
        ]
    },
    {
        "id": "211d0a99c96bf7a0",
        "type": "ui_button",
        "z": "1214aeeb5f07994e",
        "name": "unsub",
        "group": "6aa9afc81e0c8c1e",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "UnsubscribeAlerts",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"UNSUBSCRIBE\": \"ALERT\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 1260,
        "wires": [
            [
                "67ec10ffa532da35",
                "ae812febf2e1ef2f"
            ]
        ]
    },
    {
        "id": "0ee1e1029a5fa76a",
        "type": "ui_button",
        "z": "1214aeeb5f07994e",
        "name": "sub",
        "group": "6aa9afc81e0c8c1e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SubscribeTargets",
        "tooltip": "subscribes to targets",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"SUBSCRIBE\": \"MESSAGES\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 1300,
        "wires": [
            [
                "abdfac435baf9df7"
            ]
        ]
    },
    {
        "id": "923c0424199b42b0",
        "type": "ui_button",
        "z": "1214aeeb5f07994e",
        "name": "unsub",
        "group": "6aa9afc81e0c8c1e",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "UnsubscribeTargets",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"UNSUBSCRIBE\": \"MESSAGES\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 1340,
        "wires": [
            [
                "6ff253d4420bd655"
            ]
        ]
    },
    {
        "id": "abdfac435baf9df7",
        "type": "trigger",
        "z": "1214aeeb5f07994e",
        "name": "sub",
        "op1": "",
        "op2": "{\"SUBSCRIBE\":\"GPS_LOCATION\"}",
        "op1type": "pay",
        "op2type": "json",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "67ec10ffa532da35",
                "ae812febf2e1ef2f"
            ]
        ]
    },
    {
        "id": "6ff253d4420bd655",
        "type": "trigger",
        "z": "1214aeeb5f07994e",
        "name": "unsub",
        "op1": "",
        "op2": "{\"UNSUBSCRIBE\":\"GPS_LOCATION\"}",
        "op1type": "pay",
        "op2type": "json",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 1340,
        "wires": [
            [
                "67ec10ffa532da35",
                "ae812febf2e1ef2f"
            ]
        ]
    },
    {
        "id": "ae812febf2e1ef2f",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug sub/unsub",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1340,
        "wires": []
    },
    {
        "id": "658c733206d8021b",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "http://node-red-ip-address:1880/ui",
        "info": "",
        "x": 240,
        "y": 320,
        "wires": []
    },
    {
        "id": "576b0d3c1250a3c3",
        "type": "inject",
        "z": "1214aeeb5f07994e",
        "name": "ping",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "d861cb5e3d074049"
            ]
        ]
    },
    {
        "id": "d861cb5e3d074049",
        "type": "http request",
        "z": "1214aeeb5f07994e",
        "name": "http req (kismet)",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.0.0.185:2501/gps/location.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 460,
        "wires": [
            [
                "ce1e97599ee5f9dd"
            ]
        ]
    },
    {
        "id": "ce1e97599ee5f9dd",
        "type": "json",
        "z": "1214aeeb5f07994e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 670,
        "y": 460,
        "wires": [
            [
                "68c34e98cb0d38d0",
                "747db322f3b62748"
            ]
        ]
    },
    {
        "id": "68c34e98cb0d38d0",
        "type": "function",
        "z": "1214aeeb5f07994e",
        "name": "kismet json (position)",
        "func": "const short = 10000;\nconst cinco = 5 * 60 * 1000;\nconst diez = 2 * cinco;\nconst stale = new Date(Date.now() + diez).toISOString();\n\nvar name = \"kismet\"\nvar color = \"-65536\";\nvar lat = String(msg.payload[\"kismet.common.location.geopoint\"][1]);\nvar lon = String(msg.payload[\"kismet.common.location.geopoint\"][0]);\n//var alt = \n\nmsg.payload = {\n    \"event\": {\n        \"_attributes\": {\n            \"version\": \"2.0\",\n            \"uid\": \"\"+ name +\"\",\n            \"type\": \"a-u-G\",\n            \"how\": \"h-g-i-g-o\",\n            \"time\": new Date(Date.now()).toISOString(),\n            \"start\": new Date(Date.now()).toISOString(),\n            \"stale\": stale,\n        },\n        \"point\": {\n            \"_attributes\": {\n                \"lat\": \"\"+ lat +\"\",\n                \"lon\": \"\"+ lon + \"\",\n                \"hae\": \"0.0\",\n                \"ce\": \"9999999.0\",\n                \"le\": \"9999999.0\"\n            }\n        },\n        \"detail\": {\n            \"usericon\": {\n                \"_attributes\": {\n                    \"iconsetpath\": \"COT_MAPPING_SPOTMAP/b-m-p-s-m/\"+ color +\"\",\n                },\n            },\n            \"contact\": {\n                \"_attributes\": {\n                \"callsign\": \"\"+ name +\"\",\n                }\n            },\n            /* \"__group\": {\n                \"_attributes\": {\n                \"role\": \"Team Member\",\n                \"name\": \"Red\",\n                }\n            }, */\n            \"color\": {\n                \"_attributes\": {\n                \"argb\": \"\"+ color +\"\",\n                \"test\": \"test\",\n                },\n            },\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 460,
        "wires": [
            [
                "02a2cee9e7659937",
                "cec67b05f084e766"
            ]
        ]
    },
    {
        "id": "747db322f3b62748",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug json2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 360,
        "wires": []
    },
    {
        "id": "02a2cee9e7659937",
        "type": "debug",
        "z": "1214aeeb5f07994e",
        "name": "debug cot2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 360,
        "wires": []
    },
    {
        "id": "7e30854f19970de6",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "configure gps ping",
        "info": "configure ping node and scroll down to repeat and set to interval and input how often you want to update to CoTs to TAK.",
        "x": 230,
        "y": 460,
        "wires": []
    },
    {
        "id": "2e25fc6def1c08ea",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "configure http req",
        "info": "input your ip of the device running kismet, default port is 2501, input your basic auth username and password that was setup when you first started and logged in to the kismet gui",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "7bd6200db25d085a",
        "type": "ui_switch",
        "z": "1214aeeb5f07994e",
        "name": "switch",
        "label": "kismetTakFlow: Get Location",
        "tooltip": "",
        "group": "6aa9afc81e0c8c1e",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "1e027be9236197d5"
            ]
        ]
    },
    {
        "id": "1e027be9236197d5",
        "type": "trigger",
        "z": "1214aeeb5f07994e",
        "name": "ping frequency",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "false",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "d861cb5e3d074049"
            ]
        ]
    },
    {
        "id": "b2f7dedb91ecf2f3",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "(optional UI) configure ping frequency",
        "info": "in the ping frequency node configure how often you want traccar clients to be updated to TAK",
        "x": 290,
        "y": 600,
        "wires": []
    },
    {
        "id": "a305c283e2a507ec",
        "type": "comment",
        "z": "1214aeeb5f07994e",
        "name": "http://node-red-ip-address:1880/ui",
        "info": "",
        "x": 220,
        "y": 640,
        "wires": []
    },
    {
        "id": "3f871dc4f04bb293",
        "type": "websocket-client",
        "path": "ws://pi:raspberry@10.0.0.185:2501/eventbus/events.ws",
        "tls": "",
        "wholemsg": "false",
        "hb": "0",
        "subprotocol": ""
    },
    {
        "id": "1c52b35895c06e7e",
        "type": "tls-config",
        "name": "node-red to takserver",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "node-red.pem",
        "keyname": "node-red.key",
        "caname": "ca.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "6aa9afc81e0c8c1e",
        "type": "ui_group",
        "name": "Default",
        "tab": "fb24101741062f74",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fb24101741062f74",
        "type": "ui_tab",
        "name": "Tab 1",
        "icon": "dashboard",
        "order": 1
    }
]
